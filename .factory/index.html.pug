extends _index.pug

block state
  - const scripts = ['../key/index.min.js', '../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.key/index.min.js', '../text-editor.source/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor Source XML ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('textarea'), {
    |     commands: {
    |         pull: function () {
    |             return this.pull().record(), false;
    |         },
    |         push: function () {
    |             return this.push().record(), false;
    |         },
    |         redo: function () {
    |             return this.redo(), false;
    |         },
    |         undo: function () {
    |             return this.undo(), false;
    |         }
    |     },
    |     keys: {
    |         'Control-[': 'pull',
    |         'Control-]': 'push',
    |         'Control-y': 'redo',
    |         'Control-z': 'undo'
    |     },
    |     source: {
    |         type: 'XML'
    |     },
    |     tab: 2,
    |     with: [TextEditor.History, TextEditor.Key, TextEditor.SourceXML, TextEditor.Source]
    | });

block style
  style
    | mark {
    |   border-left: 1px solid #f00;
    |   border-right: 1px solid #f00;
    | }
    |
    | mark:empty {
    |   border-right-width: 0;
    | }

block content
  header
    h1
      a(href='../text-editor/index.html') &laquo;
      = ' ' + title
    p #[abbr(title='Extensible Markup Language') XML] source extension for #[a(href='../text-editor/index.html') Text Editor]. This extension provides a set of key strokes to generate responses like in a typical #[abbr(title='Extensible Markup Language') XML] source code editor.
    hr
  main
    p
      label
        input(checked onchange='return editor[this.checked ? \'attach\' : \'detach\'](), false;' type='checkbox')
        = ' '
        span Enable #[abbr(title='Extensible Markup Language') XML] Source Editor
    p
      textarea(placeholder!='Code goes here&hellip;' spellcheck='false' style={
        'display': 'block',
        'width': '100%'
      })
    p(role='group')
      button(onclick='return editor.insertElement(\'<time />\'), false;') Test Insert Element String
    p(role='group')
      button(onclick='return editor.wrapElement(\'<time>\', \'</time>\'), false;') Test Wrap Element String #1
      = ' '
      button(onclick='return editor.peelElement(\'<time>\', \'</time>\'), false;') Test Peel Element String #1
      = ' '
      button(onclick='return editor.toggleElement(\'<time>\', \'</time>\'), false;') Test Toggle Element String #1
    p(role='group')
      button(onclick='return editor.wrapElement(\'<time>\', \'</time>\', true), false;') Test Wrap Element String #2
      = ' '
      button(onclick='return editor.peelElement(\'<time>\', \'</time>\', true), false;') Test Peel Element String #2
      = ' '
      button(onclick='return editor.toggleElement(\'<time>\', \'</time>\', true), false;') Test Toggle Element String #2
    hr
    p(role='group')
      button(onclick='return editor.insertElement([\'time\', false, {datetime: (new Date).toISOString()}]), false;') Test Insert Element Object
    p(role='group')
      button(onclick='return editor.wrapElement([\'time\', (new Date).toLocaleString(), {datetime: (new Date).toISOString()}]), false;') Test Wrap Element Object #1
      = ' '
      button(onclick='return editor.peelElement([\'time\']), false;') Test Peel Element Object #1
      = ' '
      button(onclick='return editor.toggleElement([\'time\', (new Date).toLocaleString(), {datetime: (new Date).toISOString()}]), false;') Test Toggle Element Object #1
    p(role='group')
      button(onclick='return editor.wrapElement([\'time\', (new Date).toLocaleString(), {datetime: (new Date).toISOString()}], true), false;') Test Wrap Element Object #2
      = ' '
      button(onclick='return editor.peelElement([\'time\'], true), false;') Test Peel Element Object #2
      = ' '
      button(onclick='return editor.toggleElement([\'time\', (new Date).toLocaleString(), {datetime: (new Date).toISOString()}], true), false;') Test Toggle Element Object #2
    hr
    p(role='group')
      button(onclick='return editor.insertComment(\'asdf\'), false;') Test Insert Comment String
    p(role='group')
      button(onclick='return editor.wrapComment(), false;') Test Wrap Comment String #1
      = ' '
      button(onclick='return editor.peelComment(), false;') Test Peel Comment String #1
      = ' '
      button(onclick='return editor.toggleComment(), false;') Test Toggle Comment String #1
    p(role='group')
      button(onclick='return editor.wrapComment(true), false;') Test Wrap Comment String #2
      = ' '
      button(onclick='return editor.peelComment(true), false;') Test Peel Comment String #2
      = ' '
      button(onclick='return editor.toggleComment(true), false;') Test Toggle Comment String #2
    hr
    p(role='group')
      button(onclick='return editor.insertData(\'asdf\'), false;') Test Insert Data String
    p(role='group')
      button(onclick='return editor.wrapData(), false;') Test Wrap Data String #1
      = ' '
      button(onclick='return editor.peelData(), false;') Test Peel Data String #1
      = ' '
      button(onclick='return editor.toggleData(), false;') Test Toggle Data String #1
    p(role='group')
      button(onclick='return editor.wrapData(true), false;') Test Wrap Data String #2
      = ' '
      button(onclick='return editor.peelData(true), false;') Test Peel Data String #2
      = ' '
      button(onclick='return editor.toggleData(true), false;') Test Toggle Data String #2
    h2 Features
    ul
      li <code>&lt;!--<mark></mark>--&gt;</code> or <code>&lt;!-- <mark></mark> --&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;!--<mark></mark>--&gt;</code> then press <kbd>&nbsp;</kbd> (Space).
      li <code>&lt;!--<mark></mark></code> or <code>&lt;!--<mark></mark>--&gt;</code> then press <kbd>Backspace</kbd>.
      li <code>&lt;!--asdf--&gt;<mark></mark></code> then press <kbd>ArrowLeft</kbd>.
      li <code>&lt;!--asdf--&gt;<mark></mark></code> then press <kbd>Backspace</kbd>.
      li <code>&lt;!-<mark></mark></code> or <code>&lt;!-<mark></mark>&gt;</code> then press <kbd>-</kbd>.
      li <code>&lt;/div&gt;<mark></mark></code> then press <kbd>ArrowLeft</kbd>.
      li <code>&lt;/div&gt;<mark></mark></code> then press <kbd>Backspace</kbd>.
      li <code>&lt;<mark></mark></code> or <code>&lt;<mark></mark>&gt;</code> then press <kbd>?</kbd>.
      li <code>&lt;?<mark></mark></code> or <code>&lt;?<mark></mark>?&gt;</code> then press <kbd>Backspace</kbd>.
      li <code>&lt;?asdf?&gt;<mark></mark></code> then press <kbd>ArrowLeft</kbd>.
      li <code>&lt;?asdf?&gt;<mark></mark></code> then press <kbd>Backspace</kbd>.
      li <code>&lt;?xml<mark></mark>?&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;div /&gt;<mark></mark></code> then press <kbd>ArrowLeft</kbd>.
      li <code>&lt;div /&gt;<mark></mark></code> then press <kbd>Backspace</kbd>.
      li <code>&lt;div&gt;<mark></mark>&lt;/div&gt;</code> then press <kbd>Backspace</kbd>.
      li <code>&lt;div&gt;<mark></mark>&lt;/div&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;div&gt;<mark></mark></code> then press <kbd>ArrowLeft</kbd>.
      li <code>&lt;div&gt;<mark></mark></code> then press <kbd>Backspace</kbd>.
      li <code>&lt;div&gt;<mark></mark></code> then press <kbd>Enter</kbd>.
      li <code>&lt;div/&gt;<mark></mark></code> then press <kbd>ArrowLeft</kbd>.
      li <code>&lt;div/&gt;<mark></mark></code> then press <kbd>Backspace</kbd>.
      li <code>&lt;div<mark></mark></code> or <code>&lt;div<mark></mark>&gt;</code> then press <kbd>&gt;</kbd>.
      li <code>&lt;div<mark></mark></code> or <code>&lt;div<mark></mark>&gt;</code> then press <kbd>/</kbd>.
      li <code><mark></mark>&lt;!--asdf--&gt;</code> then press <kbd>ArrowRight</kbd>.
      li <code><mark></mark>&lt;!--asdf--&gt;</code> then press <kbd>Delete</kbd>.
      li <code><mark></mark>&lt;/div&gt;</code> then press <kbd>ArrowRight</kbd>.
      li <code><mark></mark>&lt;/div&gt;</code> then press <kbd>Delete</kbd>.
      li <code><mark></mark>&lt;?asdf?&gt;</code> then press <kbd>ArrowRight</kbd>.
      li <code><mark></mark>&lt;?asdf?&gt;</code> then press <kbd>Delete</kbd>.
      li <code><mark></mark>&lt;div&gt;</code> then press <kbd>ArrowRight</kbd>.
      li <code><mark></mark>&lt;div&gt;</code> then press <kbd>Delete</kbd>.
      li <code><mark></mark>&lt;div/&gt;</code> then press <kbd>ArrowRight</kbd>.
      li <code><mark></mark>&lt;div/&gt;</code> then press <kbd>Delete</kbd>.
      li <code><mark></mark>--&gt;</code> then press <kbd>Delete</kbd>.
      li <code><mark></mark>?&gt;</code> then press <kbd>Delete</kbd>.
    h2 Usage
    h3 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.key/index.min.js' target='_blank') ./text-editor.key/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source/index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.source-x-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   const editor = new TextEditor(document.querySelector('textarea'), {
      |       commands: {
      |           pull: function () {
      |               return this.pull().record(), false;
      |           },
      |           push: function () {
      |               return this.push().record(), false;
      |           },
      |           redo: function () {
      |               return this.redo(), false;
      |           },
      |           undo: function () {
      |               return this.undo(), false;
      |           }
      |       },
      |       keys: {
      |           'Control-[': 'pull',
      |           'Control-]': 'push',
      |           'Control-y': 'redo',
      |           'Control-z': 'undo'
      |       },
      |       source: {
      |           type: 'XML' // Set the current editor type as `XML`
      |       },
      |       tab: 2,
      |       // Be sure to put `TextEditor.SourceXML` before `TextEditor.Source`
      |       with: [TextEditor.History, TextEditor.Key, TextEditor.SourceXML, TextEditor.Source]
      |   });
      |
      | &lt;/script&gt;
    h3 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      | const TextEditorHistory = require('@taufik-nurrohman/text-editor.history').default;
      | const TextEditorKey = require('@taufik-nurrohman/text-editor.key').default;
      | const TextEditorSource = require('@taufik-nurrohman/text-editor.source').default;
      | const TextEditorSourceXML = require('@taufik-nurrohman/text-editor.source-x-m-l').default;
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     commands: {
      |         pull: function () {
      |             return this.pull().record(), false;
      |         },
      |         push: function () {
      |             return this.push().record(), false;
      |         },
      |         redo: function () {
      |             return this.redo(), false;
      |         },
      |         undo: function () {
      |             return this.undo(), false;
      |         }
      |     },
      |     keys: {
      |         'Control-[': 'pull',
      |         'Control-]': 'push',
      |         'Control-y': 'redo',
      |         'Control-z': 'undo'
      |     },
      |     source: {
      |         type: 'XML' // Set the current editor type as `XML`
      |     },
      |     tab: 2,
      |     // Be sure to put `TextEditorSourceXML` before `TextEditorSource`
      |     with: [TextEditorHistory, TextEditorKey, TextEditorSourceXML, TextEditorSource]
      | });
    h3 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      | import TextEditorHistory from '@taufik-nurrohman/text-editor.history';
      | import TextEditorKey from '@taufik-nurrohman/text-editor.key';
      | import TextEditorSource from '@taufik-nurrohman/text-editor.source';
      | import TextEditorSourceXML from '@taufik-nurrohman/text-editor.source-x-m-l';
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     commands: {
      |         pull: function () {
      |             return this.pull().record(), false;
      |         },
      |         push: function () {
      |             return this.push().record(), false;
      |         },
      |         redo: function () {
      |             return this.redo(), false;
      |         },
      |         undo: function () {
      |             return this.undo(), false;
      |         }
      |     },
      |     keys: {
      |         'Control-[': 'pull',
      |         'Control-]': 'push',
      |         'Control-y': 'redo',
      |         'Control-z': 'undo'
      |     },
      |     source: {
      |         type: 'XML' // Set the current editor type as `XML`
      |     },
      |     tab: 2,
      |     // Be sure to put `TextEditorSourceXML` before `TextEditorSource`
      |     with: [TextEditorHistory, TextEditorKey, TextEditorSourceXML, TextEditorSource]
      | });
    h2 Methods
    h3 Instance Methods
    h4: code editor.insertComment(value, mode = -1, clear = true)
    p Insert an #[abbr(title='Extensible Markup Language') XML] comment.
    pre: code
      | editor.insertComment('asdf'); // Delete selection and insert comment before caret
      | editor.insertComment('asdf', 0); // Replace selection with comment
      | editor.insertComment('asdf', +1); // Delete selection and insert comment after caret
    h4: code editor.insertData(value, mode = -1, clear = true)
    p Insert an #[abbr(title='Extensible Markup Language') XML] character data section.
    pre: code
      | editor.insertData('asdf'); // Delete selection and insert character data section before caret
      | editor.insertData('asdf', 0); // Replace selection with character data section
      | editor.insertData('asdf', +1); // Delete selection and insert character data section after caret
    h4: code editor.insertElement(value, mode = -1, clear = true)
    h4: code editor.insertElement(of, mode = -1, clear = true)
    p Insert an #[abbr(title='Extensible Markup Language') XML] element.
    pre: code
      | editor.insertElement('&lt;input type="text" /&gt;'); // Delete selection and insert element before caret
      | editor.insertElement('&lt;input type="text" /&gt;', 0); // Replace selection with element
      | editor.insertElement('&lt;input type="text" /&gt;', +1); // Delete selection and insert element after caret
    pre: code
      | editor.insertElement(['input', false, {type: 'text'}]); // Delete selection and insert element before caret
      | editor.insertElement(['input', false, {type: 'text'}], 0); // Replace selection with element
      | editor.insertElement(['input', false, {type: 'text'}], +1); // Delete selection and insert element after caret
    h4: code editor.peelComment(wrap = false)
    p Unwrap current selection from an #[abbr(title='Extensible Markup Language') XML] comment.
    pre: code
      | editor.peelCommet();
    h4: code editor.peelData(wrap = false)
    p Unwrap current selection from an #[abbr(title='Extensible Markup Language') XML] character data section.
    pre: code
      | editor.peelData();
    h4: code editor.peelElement(open, close, wrap = false)
    h4: code editor.peelElement(of, wrap = false)
    p Unwrap current selection from an #[abbr(title='Extensible Markup Language') XML] element.
    pre: code
      | editor.peelElement('&lt;b&gt;', '&lt;/b&gt;');
      | editor.peelElement(['b']);
    h4: code editor.toggleComment(wrap = false)
    p Toggle wrap and peel selection of an #[abbr(title='Extensible Markup Language') XML] comment.
    pre: code
      | editor.toggleComment();
    h4: code editor.toggleData(wrap = false)
    p Toggle wrap and peel selection of an #[abbr(title='Extensible Markup Language') XML] character data.
    pre: code
      | editor.toggleData();
    h4: code editor.toggleElement(open, close, wrap = false)
    h4: code editor.toggleElement(of, wrap = false)
    p Toggle wrap and peel selection of an #[abbr(title='Extensible Markup Language') XML] element.
    pre: code
      | editor.toggleElement('&lt;b&gt;', '&lt;/b&gt;');
      | editor.toggleElement(['b']);
    h4: code editor.wrapComment(wrap = false)
    p Wrap current selection with an #[abbr(title='Extensible Markup Language') XML] comment.
    pre: code
      | editor.wrapComment();
    h4: code editor.wrapData(wrap = false)
    p Wrap current selection with an #[abbr(title='Extensible Markup Language') XML] character data.
    pre: code
      | editor.wrapData();
    h4: code editor.wrapElement(open, close, wrap = false)
    h4: code editor.wrapElement(of, wrap = false)
    p Wrap current selection with an #[abbr(title='Extensible Markup Language') XML] element.
    pre: code
      | editor.wrapElement('&lt;b&gt;', '&lt;/b&gt;');
      | editor.wrapElement(['b']);
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman