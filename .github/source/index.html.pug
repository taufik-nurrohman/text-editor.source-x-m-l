extends _index.pug

block state
  - const title = 'Text Editor Source XML ' + version
  - const scripts = ['../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.source/index.min.js', 'index.min.js']

block script
  script
    | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
    |
    | TE.prototype.toggleXML = TE.SourceXML.that.toggle;
    |
    | let editor = new TE(document.querySelector('textarea'), '  '),
    |     {canKeyDown: canKeyDownSource, canKeyDownDent: canKeyDownDentSource, canKeyDownHistory: canKeyDownHistorySource, canKeyUp: canKeyUpSource} = TE.Source,
    |     {canKeyDown: canKeyDownSourceXML, canMouseDown: canMouseDownSourceXML} = TE.SourceXML;
    |
    | Object.assign(editor.state, TE.Source.state, TE.SourceXML.state);
    |
    | function onKeyDown(e) {
    |     let key = e.key,
    |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
    |     canKeyDownSourceXML(key, keys, editor) &&
    |     canKeyDownSource(key, keys, editor) &&
    |     canKeyDownDentSource(key, keys, editor) &&
    |     canKeyDownHistorySource(key, keys, editor) ||
    |     e.preventDefault();
    | }
    |
    | function onKeyUp(e) {
    |     let key = e.key,
    |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
    |     canKeyUpSource(key, keys, editor) || e.preventDefault();
    | }
    |
    | function onMouseDown(e) {
    |     canMouseDownSourceXML(editor) || e.preventDefault();
    | }
    |
    | function toggleTime() {
    |     let date = new Date;
    |     return editor.toggleXML('time', 'text goes here...', {
    |         datetime: date.toISOString()
    |     }).record();
    | }
    |
    | function letSourceEditor() {
    |     editor.self.classList.remove('source');
    |     editor.self.removeEventListener('keydown', onKeyDown);
    |     editor.self.removeEventListener('keyup', onKeyUp);
    |     editor.self.removeEventListener('mousedown', onMouseDown);
    |     editor.self.removeEventListener('touchstart', onMouseDown);
    |     editor.loss(true); // Remove all history data
    | }
    |
    | function setSourceEditor() {
    |     editor.self.classList.add('source');
    |     editor.self.addEventListener('keydown', onKeyDown, false);
    |     editor.self.addEventListener('keyup', onKeyUp, false);
    |     editor.self.addEventListener('mousedown', onMouseDown, false);
    |     editor.self.addEventListener('touchstart', onMouseDown, false);
    |     editor.record(); // Record the first history data
    | }
    |
    | setSourceEditor();

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   color: #000;
    |   border-top: 4px solid;
    |   font: normal normal 16px/1.25 serif;
    |   position: relative;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   max-width: 700px;
    |   margin: 0 auto;
    | }
    | hr {
    |   border: 0;
    |   color: inherit;
    |   border-top: 1px dashed;
    |   height: 0;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   display: block;
    |   background: #eee;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | textarea {
    |   display: block;
    |   width: 100%;
    |   height: 20em;
    | }
    | .source {
    |   background: #ccc;
    |   color: #000;
    |   border: 1px solid #000;
    |   padding: 2px;
    | }

block content
  header
    h1= title
    p #[abbr(title='Extensible Markup Language') XML] source code editor extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides a set of key strokes to generate responses like in a typical #[abbr(title='Extensible Markup Language') XML] source code editor.
  main
    p(tabindex='0') Previous tabbable element.
    p: textarea(placeholder!='Code goes here&hellip;' spellcheck='false')
    p: button(onclick='toggleTime();') Toggle Test
    p
      label
        input(checked onchange='this.checked ? setSourceEditor() : letSourceEditor();' type='checkbox')
        = ' '
        span Enable XML Source Editor
    h2 Features
    ul
      li <code>&lt;!-- <mark>|</mark> --&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;!-- <mark>|</mark></code> or <code>&lt;!-- <mark>|</mark> --&gt;</code> then press <kbd>⌫</kbd>.
      li <code>&lt;!-<mark>|</mark></code> or <code>&lt;!-<mark>|</mark>&gt;</code> then press <kbd>-</kbd>.
      li <code>&lt;/div&gt;<mark>|</mark></code> then press <kbd>←</kbd>.
      li <code>&lt;<mark>|</mark></code> or <code>&lt;<mark>|</mark>&gt;</code> then press <kbd>?</kbd>.
      li <code>&lt;?<mark>|</mark></code> or <code>&lt;?<mark>|</mark>?&gt;</code> then press <kbd>⌫</kbd>.
      li <code>&lt;div /&gt;<mark>|</mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;div&gt;<mark>|</mark>&lt;/div&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;div&gt;<mark>|</mark>&lt;/div&gt;</code> then press <kbd>⌫</kbd>.
      li <code>&lt;div&gt;<mark>|</mark></code> then press <kbd>←</kbd>.
      li <code>&lt;div&gt;<mark>|</mark></code> then press <kbd>↵</kbd>.
      li <code>&lt;div&gt;<mark>|</mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;div/&gt;<mark>|</mark></code> then press <kbd>←</kbd>.
      li <code>&lt;div/&gt;<mark>|</mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;div<mark>|</mark></code> or <code>&lt;div<mark>|</mark>&gt;</code> then press <kbd>&gt;</kbd>.
      li <code>&lt;div<mark>|</mark></code> or <code>&lt;div<mark>|</mark>&gt;</code> then press <kbd>/</kbd>.
      li <code><mark>|</mark>&lt;/div&gt;</code> then press <kbd>→</kbd>.
      li <code><mark>|</mark>&lt;/div&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark>|</mark>&lt;div&gt;</code> then press <kbd>→</kbd>.
      li <code><mark>|</mark>&lt;div&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark>|</mark>&lt;div/&gt;</code> then press <kbd>→</kbd>.
      li <code><mark>|</mark>&lt;div/&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark>|</mark>--&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark>|</mark>?&gt;</code> then press <kbd>⌦</kbd>.
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source/index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source-x-m-l/index.min.js' target='_blank') ./text-editor.source-x-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
      |
      | TE.prototype.toggleXML = TE.SourceXML.that.toggle;
      |
      | const editor = new TE(document.querySelector('textarea')),
      |
      | const {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource
      | } = TE.Source;
      |
      | const {
      |     canKeyDown: canKeyDownSourceXML,
      |     canMouseDown: canMouseDownSourceXML
      | } = TE.SourceXML;
      |
      | Object.assign(editor.state, TE.Source.state, TE.SourceXML.state);
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         canKeyDownSourceXML(key, keys, editor) &amp;&amp;
      |         canKeyDownSource(key, keys, editor) &amp;&amp;
      |         canKeyDownHistorySource(key, keys, editor) &amp;&amp;
      |         canKeyDownTabSource(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUpSource(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(editor) || e.preventDefault();
      | });
      |
      | editor.record(); // Record the first history data
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TE = require('@taufik-nurrohman/text-editor');
      | const {that: thatHistory} = require('@taufik-nurrohman/text-editor.history');
      |
      | const {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource,
      |     state: stateSource,
      |     that: thatSource
      | } = require('@taufik-nurrohman/text-editor.source');
      |
      | const {
      |     canKeyDown: canKeyDownSourceXML,
      |     canMouseDown: canMouseDownSourceXML,
      |     state: stateSourceXML,
      |     that: thatSourceXML
      | } = require('@taufik-nurrohman/text-editor.source-x-m-l');
      |
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | TE.prototype.toggleXML = thatSourceXML.toggle;
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | Object.assign(editor.state, stateSource, stateSourceXML);
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         canKeyDownSourceXML(key, keys, editor) &amp;&amp;
      |         canKeyDownSource(key, keys, editor) &amp;&amp;
      |         canKeyDownHistorySource(key, keys, editor) &amp;&amp;
      |         canKeyDownTabSource(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUpSource(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(editor) || e.preventDefault();
      | });
      |
      | editor.record();
    h4 ECMAScript
    pre: code
      | import TE from '@taufik-nurrohman/text-editor';
      | import {that: thatHistory} from '@taufik-nurrohman/text-editor.history';
      |
      | import {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource,
      |     state: stateSource,
      |     that: thatSource
      | } from '@taufik-nurrohman/text-editor.source';
      |
      | import {
      |     canKeyDown: canKeyDownSourceXML,
      |     canMouseDown: canMouseDownSourceXML,
      |     state: stateSourceXML,
      |     that: thatSourceXML
      | } from '@taufik-nurrohman/text-editor.source-x-m-l';
      |
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | TE.prototype.toggleXML = thatSourceXML.toggle;
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | Object.assign(editor.state, stateSource, stateSourceXML);
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         canKeyDownSourceXML(key, keys, editor) &amp;&amp;
      |         canKeyDownSource(key, keys, editor) &amp;&amp;
      |         canKeyDownHistorySource(key, keys, editor) &amp;&amp;
      |         canKeyDownTabSource(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUpSource(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(editor) || e.preventDefault();
      | });
      |
      | editor.record();
    h3 Methods
    h4 editor.toggleXML(name, content, attributes = {})
    p Toggle wrap and peel of an #[abbr(title='Extensible Markup Language') XML] tag.
    h3 Properties
    h4 TE.SourceXML.state
    p Return the default state to be merged with #[code editor.state].
    h3 Strokes
    p Strokes can either return #[code false] or #[code true]. If it returns #[code false], it means that this extension has manipulated the existing value. If it returns #[code true], it means that current stroke works normally.
    h4 TE.SourceXML.canKeyDown(key, {a, c, s}, that)
    p This will handle tasks such as automatic #[abbr(title='Extensible Markup Language') XML] tag closing and automatic indentation by pressing the #[kbd= '↵'] key.
    h4 TE.SourceXML.canMouseDown(that)
    p This will handle tasks such as automatic tag pattern selection on click.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman
