extends _index.pug

block state
  - const title = 'Text Editor Source XML ' + version
  - const scripts = ['../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.source/index.min.js', 'index.min.js']

block script
  script
    | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
    |
    | TE.prototype.toggleXML = TE.SourceXML.that.toggle;
    |
    | let editor = new TE(document.querySelector('textarea'), '  '),
    |     {canKeyDown, canKeyDownDent, canKeyDownHistory, canKeyUp} = TE.Source,
    |     {canKeyDown: canKeyDownXML} = TE.SourceXML;
    |
    | function onKeyDown(e) {
    |     let key = e.key,
    |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
    |     canKeyDownXML(key, keys, editor) &&
    |     canKeyDown(key, keys, editor) &&
    |     canKeyDownDent(key, keys, editor) &&
    |     canKeyDownHistory(key, keys, editor) ||
    |     e.preventDefault();
    | }
    |
    | function onKeyUp(e) {
    |     let key = e.key,
    |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
    |     canKeyUp(key, keys, editor) || e.preventDefault();
    | }
    |
    | function toggleTime() {
    |     let date = new Date;
    |     return editor.toggleXML('time', 'text goes here...', {
    |         datetime: date.toISOString()
    |     }).record();
    | }
    |
    | function letSourceEditor() {
    |     editor.self.classList.remove('source');
    |     editor.self.removeEventListener('keydown', onKeyDown);
    |     editor.self.removeEventListener('keyup', onKeyUp);
    |     editor.loss(true); // Remove all history data
    | }
    |
    | function setSourceEditor() {
    |     editor.self.classList.add('source');
    |     editor.self.addEventListener('keydown', onKeyDown, false);
    |     editor.self.addEventListener('keyup', onKeyUp, false);
    |     editor.record(); // Record the first history data
    | }
    |
    | setSourceEditor();

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   color: #000;
    |   border-top: 4px solid;
    |   font: normal normal 16px/1.25 serif;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   max-width: 700px;
    |   margin: 0 auto;
    | }
    | hr {
    |   border: 0;
    |   color: inherit;
    |   border-top: 1px dashed;
    |   height: 0;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   display: block;
    |   background: #eee;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | textarea {
    |   display: block;
    |   width: 100%;
    |   height: 20em;
    | }
    | .source {
    |   background: #ccc;
    |   color: #000;
    |   border: 1px solid #000;
    |   padding: 2px;
    | }

block content
  header
    h1= title
    p XML source code editor extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides a set of key strokes to generate responses like in a typical #[abbr(title='Extensible Markup Language') XML] source code editor.
  main
    p(tabindex='0') Previous tabbable element.
    p: textarea(placeholder!='Code goes here&hellip;' spellcheck='false')
      | &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
      | &lt;rss version=&quot;2.0&quot;&gt;
      |   &lt;channel&gt;
      |     &lt;title&gt;RSS Title&lt;/title&gt;
      |     &lt;description&gt;This is an example of an RSS feed.&lt;/description&gt;
      |     &lt;link&gt;http://www.example.com/main.html&lt;/link&gt;
      |     &lt;copyright&gt;2020 Example.com All rights reserved.&lt;/copyright&gt;
      |     &lt;lastBuildDate&gt;Mon, 06 Sep 2010 00:01:00 +0000&lt;/lastBuildDate&gt;
      |     &lt;pubDate&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;/pubDate&gt;
      |     &lt;ttl&gt;1800&lt;/ttl&gt;
      |     &lt;item&gt;
      |       &lt;title&gt;Example Entry&lt;/title&gt;
      |       &lt;description&gt;Here is some text containing an interesting description.&lt;/description&gt;
      |       &lt;link&gt;http://www.example.com/blog/post/1&lt;/link&gt;
      |       &lt;guid isPermaLink=&quot;false&quot;&gt;7bd204c6-1655-4c27-aeee-53f933c5395f&lt;/guid&gt;
      |       &lt;pubDate&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;/pubDate&gt;
      |     &lt;/item&gt;
      |   &lt;/channel&gt;
      | &lt;/rss&gt;
      | &lt;!-- This is a comment. --&gt;
    p(tabindex='0'): button(onclick='toggleTime();') Toggle Test
    p
      label
        input(checked onchange='this.checked ? setSourceEditor() : letSourceEditor();' type='checkbox')
        = ' '
        span Enable XML Source Editor
    h2 Features
    ul
      li #[code &lt;div#[mark= '|']] or #[code &lt;div#[mark= '|']&gt;] then press #[kbd= '>'].
      li #[code &lt;div#[mark= '|']] or #[code &lt;div#[mark= '|']&gt;] then press #[kbd= '/'].
      li #[code &lt;div&gt;#[mark= '|']] then press #[kbd= '↵'].
      li #[code &lt;div&gt;#[mark= '|']&lt;/div&gt;] then press #[kbd= '↵'].
      li #[code &lt;div&gt;#[mark= '|']] then press #[kbd= '⌫'].
      li #[code &lt;div /&gt;#[mark= '|']] then press #[kbd= '⌫'].
      li #[code &lt;div/&gt;#[mark= '|']] then press #[kbd= '⌫'].
      li #[code &lt;div&gt;#[mark= '|']&lt;/div&gt;] then press #[kbd= '⌫'].
      li #[code #[mark= '|']&lt;div&gt;] then press #[kbd= '⌦'].
      li #[code #[mark= '|']&lt;div/&gt;] then press #[kbd= '⌦'].
      li #[code #[mark= '|']&lt;/div&gt;] then press #[kbd= '⌦'].
      li #[code &lt;div&gt;#[mark= '|']] then press #[kbd= '←'].
      li #[code &lt;div/&gt;#[mark= '|']] then press #[kbd= '←'].
      li #[code &lt;/div&gt;#[mark= '|']] then press #[kbd= '←'].
      li #[code #[mark= '|']&lt;div&gt;] then press #[kbd= '→'].
      li #[code #[mark= '|']&lt;div/&gt;] then press #[kbd= '→'].
      li #[code #[mark= '|']&lt;/div&gt;] then press #[kbd= '→'].
      li #[code &lt;#[mark= '|']] or #[code &lt;#[mark= '|']&gt;] then press #[kbd= '?'].
      li #[code &lt;?#[mark= '|']] or #[code &lt;?#[mark= '|']?&gt;] then press #[kbd= '⌫'].
      li #[code &lt;!-#[mark= '|']] or #[code &lt;!-#[mark= '|']&gt;] then press #[kbd= '-'].
      li #[code &lt;!-- #[mark= '|'] --&gt;] then press #[kbd= '↵'].
      li #[code &lt;!-- #[mark= '|']] or #[code &lt;!-- #[mark= '|'] --&gt;] then press #[kbd= '⌫'].
      li #[code #[mark= '|']--&gt;] then press #[kbd= '⌦'].
      li #[code #[mark= '|']?&gt;] then press #[kbd= '⌦'].
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source/index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source-x-m-l/index.min.js' target='_blank') ./text-editor.source-x-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
      | #[mark= 'TE.prototype.toggleXML = TE.SourceXML.that.toggle'];
      | const editor = new TE(document.querySelector('textarea')),
      | const {canKeyDown, canKeyDownHistory, canKeyDownTab, canKeyUp} = TE.Source;
      | const {canKeyDown: #[mark canKeyDownXML]} = TE.SourceXML;
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         #[mark= 'canKeyDownXML(key, keys, editor)'] &amp;&amp;
      |         canKeyDown(key, keys, editor) &amp;&amp;
      |         canKeyDownHistory(key, keys, editor) &amp;&amp;
      |         canKeyDownTab(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUp(key, keys, editor) || e.preventDefault();
      | });
      | editor.record(); // Record the first history data
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TE = require('@taufik-nurrohman/text-editor');
      | const {that} = require('@taufik-nurrohman/text-editor.history');
      |
      | const {
      |     canKeyDown,
      |     canKeyDownHistory,
      |     canKeyDownTab,
      |     canKeyUp,
      |     that: thatSource
      | } = require('@taufik-nurrohman/text-editor.source');
      |
      | const {
      |     canKeyDown: #[mark canKeyDownXML],
      |     that: #[mark thatSourceXML]
      | } = require('@taufik-nurrohman/text-editor.source-x-m-l');
      |
      | Object.assign(TE.prototype, that, thatSource);
      |
      | #[mark= 'TE.prototype.toggleXML = thatSourceXML.toggle'];
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         #[mark= 'canKeyDownXML(key, keys, editor)'] &amp;&amp;
      |         canKeyDown(key, keys, editor) &amp;&amp;
      |         canKeyDownHistory(key, keys, editor) &amp;&amp;
      |         canKeyDownTab(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUp(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.record();
    h4 ECMAScript
    pre: code
      | import TE from '@taufik-nurrohman/text-editor';
      | import {that} from '@taufik-nurrohman/text-editor.history';
      |
      | import {
      |     canKeyDown,
      |     canKeyDownHistory,
      |     canKeyDownTab,
      |     canKeyUp,
      |     that: thatSource
      | } from '@taufik-nurrohman/text-editor.source';
      |
      | import {
      |     canKeyDown: #[mark canKeyDownXML],
      |     that: #[mark thatSourceXML]
      | } from '@taufik-nurrohman/text-editor.source-x-m-l';
      |
      | Object.assign(TE.prototype, that, thatSource);
      |
      | #[mark= 'TE.prototype.toggleXML = thatSourceXML.toggle'];
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         #[mark= 'canKeyDownXML(key, keys, editor)'] &amp;&amp;
      |         canKeyDown(key, keys, editor) &amp;&amp;
      |         canKeyDownHistory(key, keys, editor) &amp;&amp;
      |         canKeyDownTab(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUp(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.record();
    h3 Methods
    h4 editor.toggleXML(name, content, attributes = {})
    p Toggle wrap and peel of an #[abbr(title='Extensible Markup Language') XML] tag.
    h3 Strokes
    p Strokes can either return #[code false] or #[code true]. If it returns #[code false], it means that this extension has manipulated the existing value. If it returns #[code true], it means that current stroke works normally.
    h4 TE.SourceXML.canKeyDown(key, {a, c, s}, that)
    p This will handle tasks such as automatic #[abbr(title='Extensible Markup Language') XML] tag closing and automatic indentation by pressing the #[kbd= '↵'] key.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman
