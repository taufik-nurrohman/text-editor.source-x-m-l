extends _index.pug

block state
  - const title = 'Text Editor Source XML ' + version
  - const scripts = ['../key/index.min.js', '../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.source/index.min.js', 'index.min.js']

block script
  script
    | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
    |
    | TE.prototype.insertXML = TE.SourceXML.that.insert;
    | TE.prototype.toggleXML = TE.SourceXML.that.toggle;
    | TE.prototype.wrapXML = TE.SourceXML.that.wrap;
    |
    | let editor = new TE(document.querySelector('textarea'), '  '),
    |     log = document.querySelector('code.log'),
    |     map = new K(editor),
    |     {canKeyDown: canKeyDownSource, canKeyDownDent: canKeyDownDentSource, canKeyDownEnter: canKeyDownEnterSource, canKeyDownHistory: canKeyDownHistorySource, canKeyDownMove: canKeyDownMoveSource, canKeyUp: canKeyUpSource} = TE.Source,
    |     {canKeyDown: canKeyDownSourceXML, canMouseDown: canMouseDownSourceXML} = TE.SourceXML;
    |
    | editor.state = Object.assign({}, editor.state, TE.Source.state, TE.SourceXML.state);
    | editor.state.source = Object.assign({}, editor.state.source, TE.Source.state.source, TE.SourceXML.state.source, {
    |     commands: map.commands,
    |     keys: map.keys
    | });
    |
    | function onBlur() {
    |     map.pull(); // Reset all!
    | }
    |
    | function onInput() {
    |     map.pull(); // Reset all!
    | }
    |
    | function onKeyDown(e) {
    |     map.push(e.key);
    |     let command = map.command();
    |     // Check for custom command…
    |     if (command) {
    |         let value = map.fire(command);
    |         if (false === value) {
    |             e.preventDefault();
    |         } else if (null === value) {
    |             console.error('Unknown command:', command);
    |         }
    |     // Else, run the defaults!
    |     } else {
    |         canKeyDownSourceXML(map, editor) &&
    |         canKeyDownSource(map, editor) &&
    |         canKeyDownEnterSource(map, editor) &&
    |         canKeyDownDentSource(map, editor) &&
    |         canKeyDownHistorySource(map, editor) &&
    |         canKeyDownMoveSource(map, editor) ||
    |         e.preventDefault();
    |     }
    |     log.textContent = map + "";
    | }
    |
    | function onKeyUp(e) {
    |     canKeyUpSource(map, editor) || e.preventDefault();
    |     map.pull(e.key);
    |     log.textContent = map + "";
    | }
    |
    | function onMouseDown(e) {
    |     canMouseDownSourceXML(map, editor) || e.preventDefault();
    | }
    |
    | function letEditor() {
    |     editor.self.classList.remove('source');
    |     editor.self.parentNode.nextElementSibling.style.display = 'none';
    |     editor.self.removeEventListener('blur', onBlur);
    |     editor.self.removeEventListener('input', onInput);
    |     editor.self.removeEventListener('keydown', onKeyDown);
    |     editor.self.removeEventListener('keyup', onKeyUp);
    |     editor.self.removeEventListener('mousedown', onMouseDown);
    |     editor.self.removeEventListener('touchstart', onMouseDown);
    |     editor.loss(true); // Remove all history data!
    |     return editor;
    | }
    |
    | function setEditor() {
    |     editor.self.classList.add('source');
    |     editor.self.parentNode.nextElementSibling.style.display = "";
    |     editor.self.addEventListener('blur', onBlur, false);
    |     editor.self.addEventListener('input', onInput, false);
    |     editor.self.addEventListener('keydown', onKeyDown, false);
    |     editor.self.addEventListener('keyup', onKeyUp, false);
    |     editor.self.addEventListener('mousedown', onMouseDown, false);
    |     editor.self.addEventListener('touchstart', onMouseDown, false);
    |     editor.record(); // Record the first history data!
    |     return editor;
    | }
    |
    | setEditor();
    |
    | function toggleTimeXML() {
    |     let date = new Date;
    |     return editor.toggleXML('time', 'text goes here…', {
    |         datetime: date.toISOString(),
    |         test: 'asdf"asdf\'asdf<asdf>&asdf'
    |     }, ' ');
    | }

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   border-top: 4px solid;
    |   color: #000;
    |   font: normal normal 16px/1.25 serif;
    |   position: relative;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   margin: 0 auto;
    |   max-width: 700px;
    | }
    | hr {
    |   border: 0;
    |   border-top: 1px dashed;
    |   color: inherit;
    |   height: 0;
    | }
    | mark {
    |   background: #ff0;
    |   border: 1px solid #f00;
    |   display: inline-block;
    |   height: 1.25em;
    |   min-width: 3px;
    |   vertical-align: middle;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   background: #eee;
    |   display: block;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | textarea {
    |   display: block;
    |   height: 20em;
    |   width: 100%;
    | }
    | .log {
    |   color: #060;
    |   display: inline-block;
    |   font-weight: bold;
    |   margin: 0 0 0 1em;
    | }
    | .source {
    |   background: #ccc;
    |   border: 2px solid #000;
    |   color: #000;
    |   padding: 1em;
    | }

block content
  header
    h1= title
    p #[abbr(title='Extensible Markup Language') XML] source code editor extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides a set of key strokes to generate responses like in a typical #[abbr(title='Extensible Markup Language') XML] source code editor.
  main
    p
      label
        input(checked onchange='this.checked ? setEditor() : letEditor();' type='checkbox')
        = ' '
        span Enable XML Source Editor
    p: textarea(placeholder!='Code goes here&hellip;' spellcheck='false')
    p
      button(onclick='editor.insertXML(\'br\', false, {foo: \'bar\'}, ["", \'\\n\']).record();') Insert Test
      = ' '
      button(onclick='toggleTimeXML().record();') Toggle Test
      = ' '
      button(onclick='editor.wrapXML(\'foo\', "", {bar: \'baz\'}, \' \').record();') Wrap Test
      = ' '
      code.log
    h2 Features
    ul
      li <code>&lt;!-<mark></mark></code> or <code>&lt;!-<mark></mark>&gt;</code> then press <kbd>-</kbd>.
      li <code>&lt;!--<mark></mark>--&gt;</code> then press <kbd>␣</kbd>.
      li <code>&lt;!--<mark></mark>--&gt;</code> or <code>&lt;!-- <mark></mark> --&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;!--<mark></mark></code> or <code>&lt;!--<mark></mark>--&gt;</code> then press <kbd>⌫</kbd>.
      li <code>&lt;/div&gt;<mark></mark></code> then press <kbd>←</kbd>.
      li <code>&lt;/div&gt;<mark></mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;<mark></mark></code> or <code>&lt;<mark></mark>&gt;</code> then press <kbd>?</kbd>.
      li <code>&lt;?<mark></mark></code> or <code>&lt;?<mark></mark>?&gt;</code> then press <kbd>⌫</kbd>.
      li <code>&lt;?xml<mark></mark>?&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;div /&gt;<mark></mark></code> then press <kbd>←</kbd>.
      li <code>&lt;div /&gt;<mark></mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;div&gt;<mark></mark>&lt;/div&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;div&gt;<mark></mark>&lt;/div&gt;</code> then press <kbd>⌫</kbd>.
      li <code>&lt;div&gt;<mark></mark></code> then press <kbd>←</kbd>.
      li <code>&lt;div&gt;<mark></mark></code> then press <kbd>↵</kbd>.
      li <code>&lt;div&gt;<mark></mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;div/&gt;<mark></mark></code> then press <kbd>←</kbd>.
      li <code>&lt;div/&gt;<mark></mark></code> then press <kbd>⌫</kbd>.
      li <code>&lt;div<mark></mark></code> or <code>&lt;div<mark></mark>&gt;</code> then press <kbd>&gt;</kbd>.
      li <code>&lt;div<mark></mark></code> or <code>&lt;div<mark></mark>&gt;</code> then press <kbd>/</kbd>.
      li <code><mark></mark>&lt;/div&gt;</code> then press <kbd>→</kbd>.
      li <code><mark></mark>&lt;/div&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark></mark>&lt;div&gt;</code> then press <kbd>→</kbd>.
      li <code><mark></mark>&lt;div&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark></mark>&lt;div/&gt;</code> then press <kbd>→</kbd>.
      li <code><mark></mark>&lt;div/&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark></mark>--&gt;</code> then press <kbd>⌦</kbd>.
      li <code><mark></mark>?&gt;</code> then press <kbd>⌦</kbd>.
      li <code>&lt;?asdf?&gt;<mark></mark></code> then press <kbd>←</kbd>.
      li <code>&lt;?asdf?&gt;<mark></mark></code> then press <kbd>⌫</kbd>.
      li <code><mark></mark>&lt;?asdf?&gt;</code> then press <kbd>→</kbd>.
      li <code><mark></mark>&lt;?asdf?&gt;</code> then press <kbd>⌦</kbd>.
      li <code>&lt;!--asdf--&gt;<mark></mark></code> then press <kbd>←</kbd>.
      li <code>&lt;!--asdf--&gt;<mark></mark></code> then press <kbd>⌫</kbd>.
      li <code><mark></mark>&lt;!--asdf--&gt;</code> then press <kbd>→</kbd>.
      li <code><mark></mark>&lt;!--asdf--&gt;</code> then press <kbd>⌦</kbd>.
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../key/index.min.js' target='_blank') ./key/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source/index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source-x-m-l/index.min.js' target='_blank') ./text-editor.source-x-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   // Add `history()`, `loss()`, `record()`, `redo()`, `toggle()`, `undo()` methods to `TE`
      |   Object.assign(TE.prototype, TE.History.that, TE.Source.that);
      |
      |   // Add `insertXML()`, `toggleXML()`, `wrapXML()` methods to `TE`
      |   TE.prototype.insertXML = TE.SourceXML.that.insert;
      |   TE.prototype.toggleXML = TE.SourceXML.that.toggle;
      |   TE.prototype.wrapXML = TE.SourceXML.that.wrap;
      |
      |   // Create a new editor and its key map
      |   const editor = new TE(document.querySelector('textarea'));
      |   const map = new K(editor);
      |
      |   const {
      |       canKeyDown: canKeyDownSource,
      |       canKeyDownEnter: canKeyDownEnterSource,
      |       canKeyDownHistory: canKeyDownHistorySource,
      |       canKeyDownMove: canKeyDownMoveSource,
      |       canKeyDownTab: canKeyDownTabSource,
      |       canKeyUp: canKeyUpSource
      |   } = TE.Source;
      |
      |   const {
      |       canKeyDown: canKeyDownSourceXML,
      |       canMouseDown: canMouseDownSourceXML
      |   } = TE.SourceXML;
      |
      |   // Function to combine multiple objects into one
      |   function fromStates(...lot) { #[a(href='https://github.com/taufik-nurrohman/from' target='_blank') &hellip;] }
      |
      |   editor.state = fromStates({}, editor.state, TE.Source.state, TE.SourceXML.state, {
      |       commands: map.commands,
      |       keys: map.keys
      |   });
      |
      |   // Reset editor key map
      |   editor.self.addEventListener('blur', () => map.pull());
      |   editor.self.addEventListener('input', () => map.pull());
      |
      |   let debounce;
      |
      |   editor.self.addEventListener('keydown', e =&gt; {
      |       map.push(e.key);
      |       let command = map.command();
      |       // Check for custom command…
      |       if (command) {
      |           let value = map.fire(command);
      |           if (false === value) {
      |               e.preventDefault();
      |           } else if (null === value) {
      |               console.error('Unknown command:', command);
      |           }
      |       // Else, execute defaults!
      |       } else {
      |           if (
      |               canKeyDownSourceXML(map, editor) &amp;&amp;
      |               canKeyDownSource(map, editor) &amp;&amp;
      |               canKeyDownEnterSource(map, editor) &amp;&amp;
      |               canKeyDownHistorySource(map, editor) &amp;&amp;
      |               canKeyDownMoveSource(map, editor) &amp;&amp;
      |               canKeyDownTabSource(map, editor)
      |           ) {
      |               // Normal key strokes. Add more key strokes extension here!
      |           } else {
      |               e.preventDefault();
      |           }
      |       }
      |       // Reset editor key map
      |       debounce && clearTimeout(debounce);
      |       debounce = setTimeout(() => map.pull(), 1000);
      |   });
      |
      |   editor.self.addEventListener('keyup', e =&gt; {
      |       canKeyUpSource(map, editor) || e.preventDefault();
      |       // Reset editor key map per `e.key`
      |       map.pull(e.key);
      |   });
      |
      |   editor.self.addEventListener('mousedown', e =&gt; {
      |       canMouseDownSourceXML(map, editor) || e.preventDefault();
      |   });
      |
      |   // Record the first history data!
      |   editor.record();
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const {fromStates} = require('@taufik-nurrohman/from');
      | const {debounce} = require('@taufik-nurrohman/tick');
      | const K = require('@taufik-nurrohman/key').default;
      | const TE = require('@taufik-nurrohman/text-editor').default;
      | const {that: thatHistory} = require('@taufik-nurrohman/text-editor.history');
      |
      | const {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownEnter: canKeyDownEnterSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownMove: canKeyDownMoveSource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource,
      |     state: stateSource,
      |     that: thatSource
      | } = require('@taufik-nurrohman/text-editor.source');
      |
      | const {
      |     canKeyDown: canKeyDownSourceXML,
      |     canMouseDown: canMouseDownSourceXML,
      |     state: stateSourceXML,
      |     that: thatSourceXML
      | } = require('@taufik-nurrohman/text-editor.source-x-m-l');
      |
      | // Add `history()`, `loss()`, `record()`, `redo()`, `toggle()`, `undo()` methods to `TE`
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | // Add `insertXML()`, `toggleXML()`, `wrapXML()` methods to `TE`
      | TE.prototype.insertXML = thatSourceXML.insert;
      | TE.prototype.toggleXML = thatSourceXML.toggle;
      | TE.prototype.wrapXML = thatSourceXML.wrap;
      |
      | // Create a new editor and its key map
      | const editor = new TE(document.querySelector('textarea'));
      | const map = new K(editor);
      |
      | // Reset editor key map
      | const bounce = debounce(() => map.pull(), 1000);
      |
      | editor.state = fromStates({}, editor.state, stateSource, stateSourceXML, {
      |     commands: map.commands,
      |     keys: map.keys
      | });
      |
      | // Reset editor key map
      | editor.self.addEventListener('blur', () => map.pull());
      | editor.self.addEventListener('input', () => map.pull());
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     map.push(e.key);
      |     let command = map.command();
      |     // Check for custom command…
      |     if (command) {
      |         let value = map.fire(command);
      |         if (false === value) {
      |             e.preventDefault();
      |         } else if (null === value) {
      |             console.error('Unknown command:', command);
      |         }
      |     // Else, execute defaults!
      |     } else {
      |         if (
      |             canKeyDownSourceXML(map, editor) &amp;&amp;
      |             canKeyDownSource(map, editor) &amp;&amp;
      |             canKeyDownEnterSource(map, editor) &amp;&amp;
      |             canKeyDownHistorySource(map, editor) &amp;&amp;
      |             canKeyDownMoveSource(map, editor) &amp;&amp;
      |             canKeyDownTabSource(map, editor)
      |         ) {
      |             // Normal key strokes. Add more key strokes extension here!
      |         } else {
      |             e.preventDefault();
      |         }
      |     }
      |     bounce();
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     canKeyUpSource(map, editor) || e.preventDefault();
      |     // Reset editor key map per `e.key`
      |     map.pull(e.key);
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(map, editor) || e.preventDefault();
      | });
      |
      | // Record the first history data!
      | editor.record();
    h4 ECMAScript
    pre: code
      | import {fromStates} from '@taufik-nurrohman/from';
      | import {debounce} from '@taufik-nurrohman/tick';
      | import K from '@taufik-nurrohman/key';
      | import TE from '@taufik-nurrohman/text-editor';
      | import {that as thatHistory} from '@taufik-nurrohman/text-editor.history';
      |
      | import {
      |     canKeyDown as canKeyDownSource,
      |     canKeyDownEnter as canKeyDownEnterSource,
      |     canKeyDownHistory as canKeyDownHistorySource,
      |     canKeyDownMove as canKeyDownMoveSource,
      |     canKeyDownTab as canKeyDownTabSource,
      |     canKeyUp as canKeyUpSource,
      |     state as stateSource,
      |     that as thatSource
      | } from '@taufik-nurrohman/text-editor.source';
      |
      | import {
      |     canKeyDown as canKeyDownSourceXML,
      |     canMouseDown as canMouseDownSourceXML,
      |     state as stateSourceXML,
      |     that as thatSourceXML
      | } from '@taufik-nurrohman/text-editor.source-x-m-l';
      |
      | // Add `history()`, `loss()`, `record()`, `redo()`, `toggle()`, `undo()` methods to `TE`
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | // Add `insertXML()`, `toggleXML()`, `wrapXML()` methods to `TE`
      | TE.prototype.insertXML = thatSourceXML.insert;
      | TE.prototype.toggleXML = thatSourceXML.toggle;
      | TE.prototype.wrapXML = thatSourceXML.wrap;
      |
      | // Create a new editor and its key map
      | const editor = new TE(document.querySelector('textarea'));
      | const map = new K(editor);
      |
      | // Reset editor key map
      | const bounce = debounce(() => map.pull(), 1000);
      |
      | editor.state = fromStates({}, editor.state, stateSource, stateSourceXML, {
      |     commands: map.commands,
      |     keys: map.keys
      | });
      |
      | // Reset editor key map
      | editor.self.addEventListener('blur', () => map.pull());
      | editor.self.addEventListener('input', () => map.pull());
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     map.push(e.key);
      |     let command = map.command();
      |     // Check for custom command…
      |     if (command) {
      |         let value = map.fire(command);
      |         if (false === value) {
      |             e.preventDefault();
      |         } else if (null === value) {
      |             console.error('Unknown command:', command);
      |         }
      |     // Else, execute defaults!
      |     } else {
      |         if (
      |             canKeyDownSourceXML(map, editor) &amp;&amp;
      |             canKeyDownSource(map, editor) &amp;&amp;
      |             canKeyDownEnterSource(map, editor) &amp;&amp;
      |             canKeyDownHistorySource(map, editor) &amp;&amp;
      |             canKeyDownMoveSource(map, editor) &amp;&amp;
      |             canKeyDownTabSource(map, editor)
      |         ) {
      |             // Normal key strokes. Add more key strokes extension here!
      |         } else {
      |             e.preventDefault();
      |         }
      |     }
      |     bounce();
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     canKeyUpSource(map, editor) || e.preventDefault();
      |     // Reset editor key map per `e.key`
      |     map.pull(e.key);
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(map, editor) || e.preventDefault();
      | });
      |
      | // Record the first history data!
      | editor.record();
    h3 Methods
    h4 editor.insertXML(name, content, attributes = {}, tidy = false)
    p Remove selection and insert an #[abbr(title='Extensible Markup Language') XML] tag before caret.
    h4 editor.toggleXML(name, content, attributes = {}, tidy = false)
    p Toggle wrap and peel selection with an #[abbr(title='Extensible Markup Language') XML] tag.
    h4 editor.wrapXML(name, content, attributes = {}, tidy = false)
    p Wrap selection with an #[abbr(title='Extensible Markup Language') XML] tag.
    h3 Properties
    h4 TE.SourceXML.state
    p Return the default state to be combined with #[code editor.state].
    h3 Strokes
    p Strokes can either return #[code false] or #[code true]. If it returns #[code false], it means that this extension has manipulated the existing value. If it returns #[code true], it means that current stroke works normally.
    h4 TE.SourceXML.canKeyDown(map, of)
    p This will handle tasks such as automatic #[abbr(title='Extensible Markup Language') XML] tag closing and automatic indentation by pressing the #[kbd= '↵'] key.
    h4 TE.SourceXML.canMouseDown(map, of)
    p This will handle tasks such as automatic tag pattern selection on click.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman